//Trie Implementation
//insert, countWordsEqualTo() | countWordsStartingWith() | erase()

//Youtube : https://www.youtube.com/watch?v=K5pcpkEMCN0&list=PLgUwDviBIf0pcIDCZnxhv0LkHf5KzG9zp&index=2


import java.io.*;
import java.util.*;


class Node{
     Node[] link;
     int cntEndsWith;
     int cntPrefixWith;
     
     public Node(){
         link = new Node[26];
         cntEndsWith =0;
         cntPrefixWith = 0;
     }
    
    public boolean containsKey(char ch){
        return link[ch-'a'] != null;
    }
    
    public Node get(char ch){
        return link[ch -'a'];
    }
    
    public void addKey(char ch, Node n){
        link[ch-'a'] = new Node();
    }
    
    public void incrementEndsWith(){
        cntEndsWith++;
    }
    
    public void decrementEndsWith(){
        cntEndsWith--;
    }
    
    public void incrementPrefixWith(){
        cntPrefixWith++;
    }
    
    public void decrementPrefixWith(){
        cntPrefixWith++;
    }
    
    public int getPrefixWith(){
        return cntPrefixWith;
    }
    
    public int getEndsWith(){
        return cntEndsWith;
    }
}

public class Trie{
    
    static Node root;
    
    public Trie(){
        root = new Node();
    }
    
    public static void insert(String word){
        Node n = root;
        for(int i=0;i< word.length();i++){
            if(!n.containsKey(word.charAt(i))){
                n.addKey(word.charAt(i),new Node());
            }
            n = n.get(word.charAt(i));
            n.incrementPrefixWith();
        }
        n.incrementEndsWith();
    }
    
    public static int countWordsEqualTo(String word){
        Node n = root;
        for(int i=0;i<word.length();i++){
            if(n.containsKey(word.charAt(i))){
                n = n.get(word.charAt(i));
            }else
              return 0;
        }
        return n.getEndsWith();
    }
    
    
    public static int countWordsStartingWith(String word){
        Node n = root;
         for(int i=0;i<word.length();i++){
             if(n.containsKey(word.charAt(i))){
                 n = n.get(word.charAt(i));
             }else
              return 0;
         }
         return n.getPrefixWith();
    }
    
     public static void  erase(String word){
         Node n = root;
         for(int i=0;i<word.length();i++){
             if(n.containsKey(word.charAt(i))){
                 n = n.get(word.charAt(i));
                 n.decrementPrefixWith();
             }else
              return;
         }
         n.decrementEndsWith();
     }
     
     
     public static void main(String[] args){
         
         Trie t = new Trie();
         
         t.insert("apple");
         t.insert("apps");
         t.insert("apple");
         
         System.out.println(t.countWordsEqualTo("apple"));
         
         System.out.println(t.countWordsStartingWith("app"));
        
          t.erase("apps");
         
         System.out.println(t.countWordsEqualTo("apps"));
         
     }
}
