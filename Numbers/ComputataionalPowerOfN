/* 

Computational Power

pow(x,n) 

pow(2, 3) = 2 * 2* 2 = 8

*/



public class ComputataionalPowerOfN{
    
    
    /*
    
    if n %2 == 0
      
       pow(x, n/2) * pow(x, n/2)
    
    else
     
      pow(x,n-1) * x
     
    
    TC = O(log n)
    SC = O (log n)
    
    */
    public static long computationalPower(long x, long n){
        
        //pow(x,0) = x^0 = 1
        if( n ==0 )
          return 1;
        
        long tmp = computationalPower(x, n/2);
        
        tmp = tmp * tmp;
        
        if(n%2 == 0)
          return tmp;
        else
          return tmp * x;
    }
    
    /*
    
    computationalPower(3,3)
    tmp = computationalPower(3,1)
          tmp = computationalPower(3,0)
                return 1
          tmp * tmp = 1*1 = 1
          return 1;
    tmp * tmp = 1*1 = 1
    return 1* 3
    tmp * tmp = 3 * 3 = 9
    return 9 * 3 ie, 27

    
    */
    
    
    /*
    
    Based on the below logic:-
    
    1) Every number can be written as the sum of powers of 2 (ie, 1's in the binary reperesentation of the number)
    2) It takes log n to traverse a binary rerpresenattion of a number from LSB to MSB
    
    3^10 = 3^8 * 3^2 
    
    10 = 1    0    1     0
         2^8      2^2

    TC = O(log n)
    SC = O (1)
    */
    public static long computationalPowerWithSpaceComplexity1(long x, long n){
        
        long res = 1;
        
        while(n > 0){
            
            if( n%2  != 0){
                res = res  * x;
            }
            
            n = n/2;
            x = x*x;
        }
        
        return res;
    }
 
    
    
    public static void main(String[] args){
        
        int x = 3;
        int n = 3;
        
        System.out.println("The resursion method answer is :"+computationalPower(x,n));
        System.out.println("The space efficient method answer is :"+computationalPowerWithSpaceComplexity1(x,n));
    }
}

/* O/P:-


The resursion method answer is :27
The space efficient method answer is :27

*/
